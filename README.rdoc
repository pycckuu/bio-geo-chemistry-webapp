= Biogeochemistry app

<b>UI/UX</b>
* Turbolinks[https://github.com/rails/turbolinks] — fast page rendering; configured to play nice with HeadJS, AJAX, etc.
* HeadJS[http://headjs.com/] — fast and flexible JavaScript loading
* NProgress[https://github.com/rstacruz/nprogress] — mobile app style loading indicator for AJAX requests
* Fully baked authentication flows
  * Devise[https://github.com/plataformatec/devise] + Omniauth[https://github.com/intridea/omniauth] — password and OAuth logins
  * Intelligent handling of login, sign up and connect account flows
  * Pre-filling of registration forms from social data
  * Extracted from several years of production apps and real world UX testing
  * Stubbed out code for merging accounts; common social login UX problem

<b>Configuration</b>
* All app settings are in config/application.yml with automatic overriding by ENV vars
* Development secrets are checked into git for convenience
* Production secrets are configured via server ENV vars

<b>BDD/TDD</b>
* Spring[https://github.com/rails/spring] / Zeus[https://github.com/burke/zeus] — fast development and testing startup; Spring is enabled by default
* Rspec[http://rspec.info/] — tests, somewhat following BetterSpecs[http://betterspecs.org/]
* SimpleCov[https://github.com/colszowka/simplecov] — code coverage
* Guard[https://github.com/guard/guard] — automatically run tests on code change

<b>Admin</b>
* RailsAdmin[https://github.com/sferik/rails_admin] — admin interface for app data

<b>Background Jobs</b>
* Sidekiq[https://github.com/mperham/sidekiq] — fast, memory efficient background jobs

<b>Error Reporting</b>
* Airbrake[https://github.com/airbrake/airbrake] or Errbit[https://github.com/errbit/errbit]

<b>Maintainable CSS</b>
* Bootstrap3[http://getbootstrap.com/] enabled — master[https://github.com/starterkits/rails4-starterkit/tree/master] branch
* Foundation5[http://foundation.zurb.com/] enabled — foundation[https://github.com/starterkits/rails4-starterkit/tree/foundation] branch 
* BEM[http://bem.info/method/] class names — prevents class name collision
* SASS @extend[http://sass-lang.com/documentation/file.SASS_REFERENCE.html#extend] — keeps Bootstrap specific class names out of the views, making it easier to switch CSS frameworks

<b>Emails</b>
* Ink[http://zurb.com/ink/] — Zurb's email templates for maximum email client compatibility
* Premailer[http://premailer.dialect.ca/] — automatically inlines CSS styles, making it easy to customize email templates without sacrificing compatibility
* Previewable — easily preview emails in development
* Scalable — User and Devise are configured to send emails via background jobs

<b>Databases</b>
* PostgreSQL[http://www.postgresql.org/] — app data; switchable to MySQL, MongoDB, etc.
* Redis[http://redis.io/] — background job queues
* Memcached[http://memcached.org/] — session data

<b>Production Ready</b>
* Heroku[https:/www.heroku.com] ready — git clone, configure, git push heroku master and you're done
* Free hosting — configured to run web and job processes in single Heroku dyno to get started
* Unicorn[http://unicorn.bogomips.org/] — web server



<b>Additional Steps</b>

Pre-configured to make it easy to deploy apps into production environments.
However, it's a good idea to consider the following steps to make the app production ready:

* split worker and web processes into separate servers or dynos
* add SSL with CloudFlare, Heroku SSL, or similar
* add Pingdom or other monitoring service with HTML parsing to analyze page content
* setup Errbit or Airbrake and configure StarterKit to track errors
* send syslogs to a central logger that supports searching and filtering
* use a security service to analyze site for common security holes (XSS, etc.)


= Auth Flows

There are three hard coded auth flows:
1. signup — new user registration flow
2. login — returning user authentication flow
3. connect — authenticated user social account connection flow

In each flow, the user is returned to the page he/she was on at the beginning of the flow
if appropriate.

Signup and login flows have an intermediate step (RegistrationsController#after_auth) that
prompts the user for any missing required information. This is useful when new required fields
are added to User, terms of service updates, etc. It's also useful for minimizing
input fields on the first sign up page. For instance, the app might just ask for the
user's desired username on the first page and then use the intermediate page to
get first name, email, etc.


== Sign Up

Start at /a/signup

*OAuth*

1. RegistrationsController#after_auth
2. If user.valid? redirect to origin or user_root_path
3. If user.invalid? show intermediate page so user can add additional info
  1. Post to RegistrationsController#create

If user already had an account via the OAuth provider, he/she is simply logged in.

*Username/Password*

1. Post to RegistrationsController#create
2. Show intermediate page if additional info is needed
2. Redirect to origin or user_root_path


== Login

*OAuth*

If user does not already have an account via the OAuth provider, redirect to sign up page.

Otherwise, login user and redirect to either...

1. RegistrationsController#after_auth if additional account info is needed
2. Origin page if specified
3. user_root_path

*Username/Password*

Same as OAuth flow above.


= Mail Previews

Rails 4.1 introduced mailer previews. Starter Kit now has two ways to preview emails:

* http://localhost:3000/rails/mailers – Rails 4.1 built-in method
* http://0.0.0.0:3000/p/email?premail=true&layout=email – Starter Kit method with query param configs

Mail previews are only available in development by default. To make Starter Kit previews
available in other environments, set the ALLOW_EMAIL_PREVIEW='1'.


